name: App With Github Actions with docker-compose CI/CD + RDS

on: workflow_dispatch

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: 'gradle'

      - name: Make application-prod.properties
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      - name: Build with Gradle
        working-directory: ./demo
        run: |
          chmod +x gradlew
          ./gradlew build --no-daemon

      - name: Check jar file
        run: ls ./demo/build/libs

      - name: Change jar file name
        run: mv ./demo/build/libs/demo-0.0.1-SNAPSHOT.jar ./demo/build/libs/app.jar

      - name: Check changed name
        run: ls ./demo/build/libs

      - uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./demo/build/libs/app.jar

      - name: Upload docker-compose.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose.yml
          path: ./demo/docker-compose.yml

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./demo
          file: ./demo/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/furniture:latest

  cd:
    needs: ci
    runs-on: ubuntu-latest

    steps:
      - name: Download docker-compose.yml
        uses: actions/download-artifact@v4
        with:
          name: docker-compose.yml
          path: ./

      - name: Verify docker-compose.yml in Repository
        run: ls -l ./docker-compose.yml

      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: /home/${{ secrets.EC2_USERNAME }}/

      - name: Execute Deployment Script on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # application.properties 생성
            echo "${{ secrets.PROPERTIES }}" > application.properties

            # JDK 설치 확인
            if ! java -version 2>&1 | grep -q "17"; then
              sudo apt update
              sudo apt install -y openjdk-17-jdk
              echo 'JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"' | sudo tee -a /etc/environment
              source /etc/environment
              echo "JDK 17 installed and JAVA_HOME set."
            fi

            # Docker 설치 확인
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Docker Compose 설치 확인
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # docker-compose 실행
            if [[ -f "docker-compose.yml" ]]; then
              echo "Contents of docker-compose.yml:"
              cat docker-compose.yml

              sudo docker-compose down
              sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/furniture:latest
              sudo docker-compose up -d

              echo "Environment variables in container:"
              sudo docker exec $(sudo docker ps -q -f name=backend-server) env

              echo "Container logs:"
              sudo docker logs $(sudo docker ps -q -f name=backend-server)

              sudo docker image prune -a -f
              echo "Deployment completed."
            else
              echo "Error: docker-compose.yml not found in /home/${{ secrets.EC2_USERNAME }}!"
              exit 1
            fi
